{"ast":null,"code":"import { tap } from 'rxjs';\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiSource = 'http:localhost:5021/api/v1/auth';\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiSource}/login`, {\n      email,\n      password\n    }).pipe(tap({\n      next: p => this.setToken(p.token)\n    }));\n  }\n  isLoggedIn() {\n    return localStorage.getItem('token') != null;\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,GAAG,QAAQ,MAAM;AAItC,OAAM,MAAOC,WAAW;EAItBC,YAIoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANxB,cAAS,GAAG,iCAAiC;EAMP;EAEtCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAgB,GAAG,IAAI,CAACC,SAAS,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAC,CAAC,CAChFG,IAAI,CACHT,GAAG,CAAC;MACFU,IAAI,EAAEC,CAAC,IAAI,IAAI,CAACC,QAAQ,CAACD,CAAC,CAACE,KAAK;KACjC,CACF,CACF;EACH;EACAC,UAAU;IACR,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;EAC9C;EACAC,MAAM;IACJF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC;EACQN,QAAQ,CAACC,KAAa;IAC5BE,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;EACtC","names":["tap","AuthService","constructor","http","login","email","password","post","apiSource","pipe","next","p","setToken","token","isLoggedIn","localStorage","getItem","logout","removeItem","setItem"],"sourceRoot":"","sources":["C:\\Users\\israel.GALLTECNOLOGIA\\Documents\\Coding\\NetApp\\Client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Observable, tap } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LoginResponse } from '../models/LoginResponse';\r\nimport { Injectable } from '@angular/core';\r\nexport class AuthService {\r\n\r\n  apiSource = 'http:localhost:5021/api/v1/auth';\r\n\r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  login(email: string, password: string): Observable<LoginResponse>{\r\n    return this.http.post<LoginResponse>(`${this.apiSource}/login`, { email, password})\r\n      .pipe(\r\n        tap({\r\n          next: p => this.setToken(p.token)\r\n        }\r\n      )\r\n    );\r\n  }\r\n  isLoggedIn(){\r\n    return localStorage.getItem('token') != null;\r\n  }\r\n  logout(){\r\n    localStorage.removeItem('token');\r\n  }\r\n  private setToken(token: string){\r\n    localStorage.setItem('token', token);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}