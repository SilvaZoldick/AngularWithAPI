{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst token = localStorage.getItem('token');\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Authorization': token\n  })\n};\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.apiSource = 'http://localhost:5021/api/v1/Movies';\n  }\n  getMovies() {\n    return this.http.get(this.apiSource, httpOptions);\n  }\n  getMovieById(id) {\n    const url = `${this.apiSource}/${id}`;\n    return this.http.get(url, httpOptions);\n  }\n  postMovies(movie) {\n    return this.http.post(this.apiSource, movie, httpOptions);\n  }\n  putMovie(movie) {\n    const url = `${this.apiSource}/${movie.id}`;\n    return this.http.put(url, movie, httpOptions);\n  }\n  deleteMovies(id) {\n    const url = `${this.apiSource}/${id}`;\n    return this.http.delete(url, httpOptions);\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,KAAK,GAAkBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAE1D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIL,WAAW,CAAC;IACvB,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAEC;GAClB;CACF;AAKD,OAAM,MAAOK,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,cAAS,GAAG,qCAAqC;EAGlE;EACAC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAW,IAAI,CAACC,SAAS,EAAEP,WAAW,CAAC;EAC7D;EACAQ,YAAY,CAACC,EAAU;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,SAAS,IAAIE,EAAE,EAAE;IACrC,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAASI,GAAG,EAAEV,WAAW,CAAC;EAChD;EACAW,UAAU,CAACC,KAAa;IACtB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAS,IAAI,CAACN,SAAS,EAAEK,KAAK,EAAEZ,WAAW,CAAC;EACnE;EACAc,QAAQ,CAACF,KAAa;IACpB,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,SAAS,IAAIK,KAAK,CAACH,EAAE,EAAE;IAC3C,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAASL,GAAG,EAAEE,KAAK,EAAEZ,WAAW,CAAC;EACvD;EACAgB,YAAY,CAACP,EAAU;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,SAAS,IAAIE,EAAE,EAAE;IACrC,OAAO,IAAI,CAACL,IAAI,CAACa,MAAM,CAASP,GAAG,EAAEV,WAAW,CAAC;EACnD;;AAtBWE,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["HttpHeaders","token","localStorage","getItem","httpOptions","headers","MovieService","constructor","http","getMovies","get","apiSource","getMovieById","id","url","postMovies","movie","post","putMovie","put","deleteMovies","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\israel.GALLTECNOLOGIA\\Documents\\Coding\\NetApp\\Client\\src\\app\\services\\movie.service.ts"],"sourcesContent":["import { IMovie } from './movie';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\nconst token: string | null = localStorage.getItem('token');\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Authorization': token\n  })\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  private readonly apiSource = 'http://localhost:5021/api/v1/Movies';\n\n  constructor(private http: HttpClient) {\n  }\n  getMovies(): Observable<IMovie[]>{\n    return this.http.get<IMovie[]>(this.apiSource, httpOptions);\n  }\n  getMovieById(id: number): Observable<IMovie>{\n    const url = `${this.apiSource}/${id}`\n    return this.http.get<IMovie>(url, httpOptions);\n  }\n  postMovies(movie: IMovie): Observable<IMovie>{\n    return this.http.post<IMovie>(this.apiSource, movie, httpOptions);\n  }\n  putMovie(movie: IMovie): Observable<IMovie>{\n    const url = `${this.apiSource}/${movie.id}`\n    return this.http.put<IMovie>(url, movie, httpOptions);\n  }\n  deleteMovies(id: number): Observable<any>{\n    const url = `${this.apiSource}/${id}`\n    return this.http.delete<IMovie>(url, httpOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}